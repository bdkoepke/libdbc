\section{Contract System}

\subsection{Common}

We start off with the common contract definition which will be used by the implementation of many of the other contracts. We take in an expression as well as a string representation of that same expression so we can pretty-print the contract violation. We also take in the file name, line number, the function name, and a format string. Within this contract we then check whether the expression is satisfied. If it is not then we print the error, assert failure (to aid with debugging), and finally exit with failure status. The reason that we are failing hard and fast with these contract violations is because we do not know whether the program still has valid state after a contract violation. In theory, none of these contracts should ever be violated in release code.
<<contract-c>>=
static inline void contract(bool expr, const char *expr_s, const char *file,
                            int line, const char *func, const char *format) {
  if (!expr) {
    fprintf(stderr, format, file, line, func, expr_s);
    assert(false), exit(EXIT_FAILURE);
  }
}
@

We also define a generic contract that asserts that it's input is non-null and also returns it's argument to the caller.
<<contract-non-null-c>>=
static inline void *contract_non_null(const void *x, const char *x_s,
                                      const char *file, int line,
                                      const char *func, const char *format) {
  if (x == NULL) {
    fprintf(stderr, format, file, line, func, x_s);
    assert(false), exit(EXIT_FAILURE);
  }
  return void_cast(x);
}
@

Finally we have a generic contract that asserts equailty between two values and returns the first argument to the caller.
<<contract-equal-c>>=
static inline void *contract_equal(const void *a, const void *b,
                                   const char *a_s, const char *b_s,
                                   const char *file, int line, const char *func,
                                   const char *format) {
  if (a != b) {
    fprintf(stderr, format, file, line, func, a_s, b_s);
    assert(false), exit(EXIT_FAILURE);
  }
  return void_cast(a);
}
@

\subsection{Strong}

We start off by defining a simple contract that will always fail when reached. This enables us to make failure cases explicit. We use \emph{\#define} here so we can get references to the point in the source code where the contract was violated.
<<contract-fail-h>>=
#define contract_fail() _contract_fail(__FILE__, __LINE__, __func__)
void _contract_fail(const char *file, int line, const char *func);
@
<<contract-fail-c>>=
void _contract_fail(const char *file, int line, const char *func) {
  fprintf(stderr, "%s:%d: %s: Fail.\n", file, line, func);
  assert(false), exit(EXIT_FAILURE);
}
@

We also define a contract that ensures a value is not null before proceeding with the body of a method. In order to facilitate more compact code we also return a reference to the value that was passed in. Also note that we have a defined `function' as well as the actual function itself. Do not use the function declaration directly, the \emph{\#define} is the intended function call and the function declaration is only exposed in order to facilitate the defined function.
<<contract-requires-non-null-h>>=
#define contract_requires_non_null(x)                                          \
  _contract_requires_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_requires_non_null(const void *x, const char *x_s,
                                  const char *file, int line, const char *func);
@
<<contract-requires-non-null-c>>=
void *_contract_requires_non_null(const void *x, const char *x_s,
                                  const char *file, int line,
                                  const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Requires `%s' != NULL failed.\n");
}
@

It is also useful to be able to assert equality between two values.
<<contract-requires-equal-h>>=
#define contract_requires_equal(a, b)                                          \
  _contract_requires_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_requires_equal(const void *a, const void *b, const char *a_s,
                               const char *b_s, const char *file, int line,
                               const char *func);
@
<<contract-requires-equal-c>>=
void *_contract_requires_equal(const void *a, const void *b, const char *a_s,
                               const char *b_s, const char *file, int line,
                               const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Requires `%s' == `%s' failed.\n");
}
@

Our final strong precondition contract lets us assert against arbitrary expressions. 
<<contract-requires-h>>=
#define contract_requires(expr)                                                \
  _contract_requires((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_requires(bool expr, const char *expr_s, const char *file,
                        int line, const char *func);
@
<<contract-requires-c>>=
void _contract_requires(bool expr, const char *expr_s, const char *file,
                        int line, const char *func) {
  contract(expr, expr_s, file, line, func,
           "%s:%d: %s: Requires `%s' failed.\n");
}
@


We also define these contracts as postconditions. While you could use the requires contracts for postconditions as well (they do the same thing), using ensures clarifies the code.
<<contract-ensures-h>>=
#define contract_ensures(expr)                                                 \
  _contract_ensures((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_ensures(bool expr, const char *expr_s, const char *file,
                       int line, const char *func);
@
<<contract-ensures-c>>=
void _contract_ensures(bool expr, const char *expr_s, const char *file,
                       int line, const char *func) {
  contract(expr, expr_s, file, line, func, "%s:%d: %s: Ensures `%s' failed.\n");
}
@
<<contract-ensures-non-null-h>>=
#define contract_ensures_non_null(x)                                           \
  _contract_ensures_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_ensures_non_null(const void *x, const char *x_s,
                                 const char *file, int line, const char *func);
@
<<contract-ensures-non-null-c>>=
void *_contract_ensures_non_null(const void *x, const char *x_s,
                                 const char *file, int line, const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Ensures `%s' != NULL failed.\n");
}
@
<<contract-ensures-equal-h>>=
#define contract_ensures_equal(a, b)                                           \
  _contract_ensures_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_ensures_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func);
@
<<contract-ensures-equal-c>>=
void *_contract_ensures_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Ensures `%s' == `%s' failed.\n");
}
@

Finally we define the same contracts as invariants.
<<contract-invariant-h>>=
#define contract_invariant(expr)                                               \
  _contract_invariant((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_invariant(bool expr, const char *expr_s, const char *file,
                         int line, const char *func);
@
<<contract-invariant-c>>=
void _contract_invariant(bool expr, const char *expr_s, const char *file,
                         int line, const char *func) {
  contract(expr, expr_s, file, line, func,
           "%s:%d: %s: Invariant `%s' failed.\n");
}
@
<<contract-invariant-non-null-h>>=
#define contract_invariant_non_null(x)                                         \
  _contract_invariant_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_invariant_non_null(const void *x, const char *x_s,
                                   const char *file, int line,
                                   const char *func);
@
<<contract-invariant-non-null-c>>=
void *_contract_invariant_non_null(const void *x, const char *x_s,
                                   const char *file, int line,
                                   const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Invariant `%s' != NULL failed.\n");
}
@
<<contract-invariant-equal-h>>=
#define contract_invariant_equal(a, b)                                         \
  _contract_invariant_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_invariant_equal(const void *a, const void *b, const char *a_s,
                                const char *b_s, const char *file, int line,
                                const char *func);
@
<<contract-invariant-equal-c>>=
void *_contract_invariant_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Invariant `%s' == `%s' failed.\n");
}
@

\subsection{Weak}

The weak contracts are implemented in the same way as the strong contracts, the only difference is that we can compile these out without impacting the API of the application.
<<contract-weak-h>>=
#define contract_weak_requires(expr)                                           \
  _contract_requires((expr), #expr, __FILE__, __LINE__, __func__)
#define contract_weak_requires_non_null(x)                                     \
  _contract_requires_non_null((x), #x, __FILE__, __LINE__, __func__)
#define contract_weak_requires_equal(a, b)                                     \
  _contract_requires_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)

#define contract_weak_ensures(expr)                                            \
  _contract_ensures((expr), #expr, __FILE__, __LINE__, __func__)
#define contract_weak_ensures_non_null(x)                                      \
  _contract_ensures_non_null((x), #x, __FILE__, __LINE__, __func__)
#define contract_weak_ensures_equal(a, b)                                      \
  _contract_ensures_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
@

<<contract.h>>=
#pragma once
#include <stdbool.h>
<<contract-fail-h>>

<<contract-requires-non-null-h>>
<<contract-requires-equal-h>>
<<contract-requires-h>>

<<contract-ensures-non-null-h>>
<<contract-ensures-equal-h>>
<<contract-ensures-h>>

<<contract-invariant-non-null-h>>
<<contract-invariant-equal-h>>
<<contract-invariant-h>>

<<contract-weak-h>>
@

<<contract.c>>=
#include "contract.h"
#include "unsafe.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

<<contract-c>>

<<contract-fail-c>>
<<contract-non-null-c>>
<<contract-equal-c>>

<<contract-requires-non-null-c>>
<<contract-requires-equal-c>>
<<contract-requires-c>>

<<contract-ensures-non-null-c>>
<<contract-ensures-equal-c>>
<<contract-ensures-c>>

<<contract-invariant-non-null-c>>
<<contract-invariant-equal-c>>
<<contract-invariant-c>>
@
