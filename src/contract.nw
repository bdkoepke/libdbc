\section{Contract System}

\subsection{Common}

We start off with the common contract definition that will be used by the implementation of many of the other contracts. We take in an expression as well as a string representation of that same expression so we can pretty-print the contract violation. We also take in the file name, line number, the function name, and a format string. Within this contract we then check whether the expression is satisfied. If it is not then we print the error, assert failure (to aid with debugging), and finally exit with failure status. The reason that we are failing hard and fast with these contract violations is because we do not know whether the program still has valid state after a contract violation. In theory, none of these contracts should ever be violated in release code.
<<Common Contract>>=
void contract(bool expr, const char *expr_s, const char *file,
              int line, const char *func, const char *format) {
  if (!expr) {
    fprintf(stderr, format, file, line, func, expr_s);
    assert(false), exit(EXIT_FAILURE);
  }
}
@

We also define a generic contract that asserts that it's input is non-null and also returns it's argument to the caller.
<<Non Null Contract>>=
void *contract_non_null(const void *x, const char *x_s,
                        const char *file, int line,
                        const char *func, const char *format) {
  if (x == NULL) {
    fprintf(stderr, format, file, line, func, x_s);
    assert(false), exit(EXIT_FAILURE);
  }
  return void_cast(x);
}
@

The last common contract we will define asserts equailty between two values and returns the first argument to it's caller.
<<Equality Contract>>=
void *contract_equal(const void *a, const void *b,
                     const char *a_s, const char *b_s,
                     const char *file, int line, const char *func,
                     const char *format) {
  if (a != b) {
    fprintf(stderr, format, file, line, func, a_s, b_s);
    assert(false), exit(EXIT_FAILURE);
  }
  return void_cast(a);
}
@

\subsection{Strong}

Strong contracts are contracts that should be left in release code (in other words, they are part of the public API of your module).

\subsubsection{Failure}

We define a simple contract that will always fail when reached. This enables us to make failure cases explicit. We use \emph{\#define} here so we can get references to the point in the source code where the contract was violated.
<<Failure Contract Declaration>>=
#define contract_fail() _contract_fail(__FILE__, __LINE__, __func__)
void _contract_fail(const char *file, int line, const char *func);
@
<<Failure Contract Implementation>>=
void _contract_fail(const char *file, int line, const char *func) {
  fprintf(stderr, "%s:%d: %s: Fail.\n", file, line, func);
  assert(false), exit(EXIT_FAILURE);
}
@

\subsubsection{Preconditions}

The next strong contract is used to assert a precondition for a method. Looking at the implementation we can see that we are just forwarding the call to the common non null handler.
<<Requires Non Null Declaration>>=
#define contract_requires_non_null(x)                                          \
  _contract_requires_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_requires_non_null(const void *x, const char *x_s,
                                  const char *file, int line, const char *func);
@
<<Requires Non Null Implementation>>=
void *_contract_requires_non_null(const void *x, const char *x_s,
                                  const char *file, int line,
                                  const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Requires `%s' != NULL failed.\n");
}
@

It is also useful to be able to assert equality between two values.
<<Requires Equality Declaration>>=
#define contract_requires_equal(a, b)                                          \
  _contract_requires_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_requires_equal(const void *a, const void *b, const char *a_s,
                               const char *b_s, const char *file, int line,
                               const char *func);
@
<<Requires Equality Implementation>>=
void *_contract_requires_equal(const void *a, const void *b, const char *a_s,
                               const char *b_s, const char *file, int line,
                               const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Requires `%s' == `%s' failed.\n");
}
@

We can also assert arbitrary expressions.
<<Requires Expression Declaration>>=
#define contract_requires(expr)                                                \
  _contract_requires((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_requires(bool expr, const char *expr_s, const char *file,
                        int line, const char *func);
@
<<Requires Expression Implementation>>=
void _contract_requires(bool expr, const char *expr_s, const char *file,
                        int line, const char *func) {
  contract(expr, expr_s, file, line, func,
           "%s:%d: %s: Requires `%s' failed.\n");
}
@

\subsubsection{Postconditions}

We also redefine the above precondition functions as postcondition functions. While they do the same thing functionally, by declaring them as postconditions we can try and improve code-clarity.
<<contract-ensures-non-null-h>>=
<<Ensures Non Null Declaration>>=
#define contract_ensures_non_null(x)                                           \
  _contract_ensures_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_ensures_non_null(const void *x, const char *x_s,
                                 const char *file, int line, const char *func);
@
<<Ensures Non Null Implementation>>=
void *_contract_ensures_non_null(const void *x, const char *x_s,
                                 const char *file, int line, const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Ensures `%s' != NULL failed.\n");
}
@
<<Ensures Equality Declaration>>=
#define contract_ensures_equal(a, b)                                           \
  _contract_ensures_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_ensures_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func);
@
<<Ensures Equality Implementation>>=
void *_contract_ensures_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Ensures `%s' == `%s' failed.\n");
}
@

<<Ensures Expression Declaration>>=
#define contract_ensures(expr)                                                 \
  _contract_ensures((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_ensures(bool expr, const char *expr_s, const char *file,
                       int line, const char *func);
@
<<Ensures Expression Implementation>>=
void _contract_ensures(bool expr, const char *expr_s, const char *file,
                       int line, const char *func) {
  contract(expr, expr_s, file, line, func, "%s:%d: %s: Ensures `%s' failed.\n");
}
@

\subsubsection{Invariants}

Finally we define the same contracts as invariants.
<<Invariant Expression Declaration>>=
#define contract_invariant(expr)                                               \
  _contract_invariant((expr), #expr, __FILE__, __LINE__, __func__)
void _contract_invariant(bool expr, const char *expr_s, const char *file,
                         int line, const char *func);
@
<<Invariant Expression Implementation>>=
void _contract_invariant(bool expr, const char *expr_s, const char *file,
                         int line, const char *func) {
  contract(expr, expr_s, file, line, func,
           "%s:%d: %s: Invariant `%s' failed.\n");
}
@
<<Invariant Non Null Declaration>>=
#define contract_invariant_non_null(x)                                         \
  _contract_invariant_non_null((x), #x, __FILE__, __LINE__, __func__)
void *_contract_invariant_non_null(const void *x, const char *x_s,
                                   const char *file, int line,
                                   const char *func);
@
<<Invariant Non Null Implementation>>=
void *_contract_invariant_non_null(const void *x, const char *x_s,
                                   const char *file, int line,
                                   const char *func) {
  return contract_non_null(x, x_s, file, line, func,
                           "%s:%d: %s: Invariant `%s' != NULL failed.\n");
}
@
<<Invariant Equality Declaration>>=
#define contract_invariant_equal(a, b)                                         \
  _contract_invariant_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
void *_contract_invariant_equal(const void *a, const void *b, const char *a_s,
                                const char *b_s, const char *file, int line,
                                const char *func);
@
<<Invariant Equality Implementation>>=
void *_contract_invariant_equal(const void *a, const void *b, const char *a_s,
                              const char *b_s, const char *file, int line,
                              const char *func) {
  return contract_equal(a, b, a_s, b_s, file, line, func,
                        "%s:%d: %s: Invariant `%s' == `%s' failed.\n");
}
@

\subsection{Weak}

The weak contracts are implemented in the same way as the strong contracts, the only difference is that we can compile these out without impacting the API of the application.
<<Weak Contracts>>=
#define contract_weak_requires(expr)                                           \
  _contract_requires((expr), #expr, __FILE__, __LINE__, __func__)
#define contract_weak_requires_non_null(x)                                     \
  _contract_requires_non_null((x), #x, __FILE__, __LINE__, __func__)
#define contract_weak_requires_equal(a, b)                                     \
  _contract_requires_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)

#define contract_weak_ensures(expr)                                            \
  _contract_ensures((expr), #expr, __FILE__, __LINE__, __func__)
#define contract_weak_ensures_non_null(x)                                      \
  _contract_ensures_non_null((x), #x, __FILE__, __LINE__, __func__)
#define contract_weak_ensures_equal(a, b)                                      \
  _contract_ensures_equal((a), (b), #a, #b, __FILE__, __LINE__, __func__)
@

\subsection{Completed files.}

<<contract.h>>=
#pragma once
#include <stdbool.h>
<<Failure Contract Declaration>>

<<Requires Non Null Declaration>>
<<Requires Equality Declaration>>
<<Requires Expression Declaration>>

<<Ensures Non Null Declaration>>
<<Ensures Equality Declaration>>
<<Ensures Expression Declaration>>

<<Invariant Non Null Declaration>>
<<Invariant Equality Declaration>>
<<Invariant Expression Declaration>>

<<Weak Contracts>>
@

<<contract.c>>=
#include "contract.h"
#include "unsafe.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

<<Common Contract>>

<<Failure Contract Implementation>>
<<Non Null Contract>>
<<Equality Contract>>

<<Requires Non Null Implementation>>
<<Requires Equality Implementation>>
<<Requires Expression Implementation>>

<<Ensures Non Null Implementation>>
<<Ensures Equality Implementation>>
<<Ensures Expression Implementation>>

<<Invariant Non Null Implementation>>
<<Invariant Equality Implementation>>
<<Invariant Expression Implementation>>
@
